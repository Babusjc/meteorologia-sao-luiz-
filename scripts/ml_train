import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
import joblib
from scripts.database import NeonDB
from dotenv import load_dotenv
import logging
import sys
from pathlib import Path

# Adiciona o diretório pai ao path para resolver imports
sys.path.append(str(Path(__file__).resolve().parent.parent))

# Agora importe o módulo database
from scripts.database import NeonDB

load_dotenv()
logging.basicConfig(level=logging.INFO)

def train_precipitation_model():
    """Treina modelo de previsão de precipitação"""
    try:
        db = NeonDB()
        df = db.get_data("""
            SELECT 
                data, hora,
                precipitacao_total,
                temperatura_ar,
                umidade_relativa,
                pressao_atm_estacao,
                radiacao_global
            FROM meteo_data
            WHERE precipitacao_total IS NOT NULL
            ORDER BY data, hora
        """)
        
        if df.empty:
            logging.warning("Nenhum dado disponível para treinamento")
            return
        
        # Engenharia de features
        df['datetime'] = pd.to_datetime(df['data'].astype(str) + ' ' + pd.to_datetime(df['hora'], format='%H:%M:%S').dt.strftime('%H:%M:%S')
        df['hour'] = pd.to_datetime(df['datetime']).dt.hour
        df['day_of_week'] = pd.to_datetime(df['datetime']).dt.dayofweek
        df['month'] = pd.to_datetime(df['datetime']).dt.month
        
        # Preparar dados
        features = [
            'temperatura_ar', 'umidade_relativa', 
            'pressao_atm_estacao', 'radiacao_global',
            'hour', 'day_of_week', 'month'
        ]
        target = 'precipitacao_total'
        
        # Remover linhas com valores faltantes
        df_clean = df.dropna(subset=features + [target])
        
        if df_clean.empty:
            logging.warning("Dados insuficientes após limpeza")
            return
            
        X = df_clean[features]
        y = df_clean[target]
        
        # Dividir dados
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )
        
        # Treinar modelo
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        
        # Avaliar
        preds = model.predict(X_test)
        mae = mean_absolute_error(y_test, preds)
        logging.info(f"MAE do modelo: {mae:.2f} mm")
        
        # Salvar modelo
        joblib.dump(model, 'models/precipitation_model.pkl')
        logging.info("Modelo salvo em models/precipitation_model.pkl")
        
    except Exception as e:
        logging.error(f"Erro no treinamento do modelo: {str(e)}")

if __name__ == "__main__":
    train_precipitation_model()
