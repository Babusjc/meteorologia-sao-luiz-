import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
import joblib
from pathlib import Path

def train_precipitation_model():
    # Carregar dados processados
    data_path = Path("data/processed/processed_weather_data.parquet")
    if not data_path.exists():
        print("Processed data not found")
        return
    
    df = pd.read_parquet(data_path)
    
    # Preparar dados para modelagem
    if "precipitacao_total" not in df.columns:
        print("Precipitation data missing")
        return
    
    # Criar variável alvo (próxima hora)
    df["target"] = df["precipitacao_total"].shift(-1).fillna(0)
    
    # Classificar chuva em categorias
    conditions = [
        (df["target"] == 0),
        (df["target"] > 0) & (df["target"] <= 2.5),
        (df["target"] > 2.5)
    ]
    choices = [0, 1, 2]  # 0: Sem chuva, 1: Chuva leve, 2: Chuva forte
    df["rain_class"] = np.select(conditions, choices, default=0)
    
    # Features
    features = [
        "temperatura_ar", "umidade_relativa", "pressao_atm_estacao",
        "radiacao_global", "temperatura_max", "temperatura_min",
        "hour", "weekday", "month"
    ]
    
    # Filtrar dados completos
    df = df.dropna(subset=features + ["rain_class"])
    
    if df.empty:
        print("No data available for training")
        return
    
    X = df[features]
    y = df["rain_class"]
    
    # Dividir dados
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    
    # Criar e treinar modelo
    model = make_pipeline(
        StandardScaler(),
        RandomForestClassifier(
            n_estimators=100,
            max_depth=10,
            class_weight="balanced",
            random_state=42
        )
    )
    
    model.fit(X_train, y_train)
    
    # Avaliar
    y_pred = model.predict(X_test)
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("\nClassification Report:\n", classification_report(y_test, y_pred))
    
    # Salvar modelo
    model_dir = Path("models")
    model_dir.mkdir(exist_ok=True)
    joblib.dump(model, model_dir / "precipitation_model.pkl")
    print("Model saved successfully")

if __name__ == "__main__":
    train_precipitation_model()
